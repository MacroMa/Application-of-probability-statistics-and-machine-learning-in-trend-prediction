fitdata5=data.frame(matrix(ncol = 3,nrow = 144*2))
colnames(fitdata5)=c("date","value","类型")
fitdata5[1:144,1]=as.character(alldata$Time[37:180])
fitdata5[145:288,1]=as.character(alldata$Time[37:180])
fitdata5[1:144,2]=final_bpdata$pred_y+arima_main_result[37:180]
fitdata5[145:288,2]=final_bpdata$y++arima_main_data[37:180]
fitdata5$type=NA
fitdata5[1:144,3]="BPANN拟合值"
fitdata5[145:288,3]="真实值"
fitdata5$`类型`=as.factor(fitdata5$`类型`)
#plot12#
ggplot(data = fitdata5,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("时间")+ylab("Mortality")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
final_train_data=data.frame(matrix(nrow = 12,ncol = 4))
final_train_data[,1]=alldata[169:180,4]
final_train_data[,2]=alldata[133:144,4]
final_train_data[,3]=alldata[145:156,4]
final_train_data[,4]=alldata[157:159,4]
colnames(final_train_data)=c("y","x1","x2","x3")
final_result=data.frame(matrix(nrow = 12,ncol = 7))
colnames(final_result)=c("日期","实际值","ARIMA","SVR","BPANN","ARIMA-SVR","ARIMA-BPANN")
final_result$日期=alldata[169:180,1]
final_result$实际值=alldata[169:180,4]
final_result$ARIMA=fit1$fitted[169:180]
mysvr=svm(y~x1+x2+x3,data=final_train_data,gamma=0.05,cost=6e05)
final_result$SVR=predict(mysvr,final_train_data)
mybp= neuralnet(y~x1+x2+x3,final_train_data,
hidden=1, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_result$BPANN=predict(mybp,final_train_data)
final_result$`ARIMA-SVR`=fitdata4[133:144,2]
final_result$`ARIMA-BP`=fitdata5[133:144,2]
final_result
date_char=c("M1","M2","M3","M4","M5","M6",
"M7","M8","M9","M10","M11","M12")
final_plot_data=data.frame(matrix(ncol = 3,nrow = 12*6))
colnames(final_plot_data)=c("date","value","类型")
final_plot_data[1:12,1]=date_char
final_plot_data[1:12,2]=final_result[,2]
final_plot_data[1:12,3]="实际值"
final_plot_data[13:24,1]=date_char
final_plot_data[13:24,2]=final_result[,3]
final_plot_data[13:24,3]="ARIMA"
final_plot_data[25:36,1]=date_char
final_plot_data[25:36,2]=final_result[,4]
final_plot_data[25:36,3]="SVR"
final_plot_data[37:48,1]=date_char
final_plot_data[37:48,2]=final_result[,5]
final_plot_data[37:48,3]="BPANN"
final_plot_data[49:60,1]=date_char
final_plot_data[49:60,2]=final_result[,6]
final_plot_data[49:60,3]="ARIMA-SVR"
final_plot_data[61:72,1]=date_char
final_plot_data[61:72,2]=final_result[,7]
final_plot_data[61:72,3]="ARIMA-BPANN"
final_plot_data$date=as.factor(final_plot_data$date)
final_plot_data$type=as.factor(final_plot_data$type)
p1=ggplot(data = final_plot_data,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("2018")+ylab("")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
p2=ggplot(data = final_plot_data,aes(colour=`类型`))+
geom_boxplot(aes(x=date,y=value,group=`类型`))+
xlab("")+ylab("Mortality")+
guides(colour=F)+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),
axis.text.x = element_blank())
final_plot_data
final_plot_data$=as.factor(final_plot_data$`类型`)
final_plot_data$`类型`=as.factor(final_plot_data$`类型`)
p1=ggplot(data = final_plot_data,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("2018")+ylab("")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
p2=ggplot(data = final_plot_data,aes(colour=`类型`))+
geom_boxplot(aes(x=date,y=value,group=`类型`))+
xlab("")+ylab("Mortality")+
guides(colour=F)+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),
axis.text.x = element_blank())
ggarrange(p2, p1,widths = c(1,2.5))
## MSE MAE MAPE
final_analysis=final_result
final_train_data=data.frame(matrix(nrow = 12,ncol = 4))
final_train_data[,1]=alldata[169:180,4]
final_train_data[,2]=alldata[133:144,4]
final_train_data[,3]=alldata[145:156,4]
final_train_data[,4]=alldata[157:159,4]
colnames(final_train_data)=c("y","x1","x2","x3")
final_result=data.frame(matrix(nrow = 12,ncol = 7))
colnames(final_result)=c("日期","实际值","ARIMA","SVR","BPANN","ARIMA-SVR","ARIMA-BPANN")
final_result$日期=alldata[169:180,1]
final_result$实际值=alldata[169:180,4]
final_result$ARIMA=fit1$fitted[169:180]
mysvr=svm(y~x1+x2+x3,data=final_train_data,gamma=0.05,cost=6e05)
final_result$SVR=predict(mysvr,final_train_data)
mybp= neuralnet(y~x1+x2+x3,final_train_data,
hidden=1, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_result$BPANN=predict(mybp,final_train_data)
final_result$`ARIMA-SVR`=fitdata4[133:144,2]
final_result$`ARIMA-BP`=fitdata5[133:144,2]
final_result
predict(mybp,final_train_data)
fitdata4
fitdata5
final_result$`ARIMA-BPANN`=fitdata5[133:144,2]
colnames(final_result)=c("日期","实际值","ARIMA","SVR","BPANN","ARIMA-SVR","ARIMA-BPANN")
final_result$日期=alldata[169:180,1]
final_result$实际值=alldata[169:180,4]
final_result$ARIMA=fit1$fitted[169:180]
mysvr=svm(y~x1+x2+x3,data=final_train_data,gamma=0.05,cost=6e05)
final_result$SVR=predict(mysvr,final_train_data)
mybp= neuralnet(y~x1+x2+x3,final_train_data,
hidden=1, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_result$BPANN=predict(mybp,final_train_data)
final_result$`ARIMA-SVR`=fitdata4[133:144,2]
final_result$`ARIMA-BPANN`=fitdata5[133:144,2]
final_result
date_char=c("M1","M2","M3","M4","M5","M6",
"M7","M8","M9","M10","M11","M12")
View(final_result)
final_result=data.frame(matrix(nrow = 12,ncol = 7))
colnames(final_result)=c("日期","实际值","ARIMA","SVR","BPANN","ARIMA-SVR","ARIMA-BPANN")
View(final_result)
final_result$日期=alldata[169:180,1]
final_result$实际值=alldata[169:180,4]
final_result$ARIMA=fit1$fitted[169:180]
final_result
mysvr=svm(y~x1+x2+x3,data=final_train_data,gamma=0.05,cost=6e05)
final_result$SVR=predict(mysvr,final_train_data)
final_result
mybp= neuralnet(y~x1+x2+x3,final_train_data,
hidden=1, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_result
final_result$BPANN=predict(mybp,final_train_data)
final_result
final_result$`ARIMA-SVR`=fitdata4[133:144,2]
final_result$`ARIMA-BPANN`=fitdata5[133:144,2]
final_result
date_char=c("M1","M2","M3","M4","M5","M6",
"M7","M8","M9","M10","M11","M12")
final_plot_data=data.frame(matrix(ncol = 3,nrow = 12*6))
colnames(final_plot_data)=c("date","value","类型")
final_result
date_char=c("M1","M2","M3","M4","M5","M6",
"M7","M8","M9","M10","M11","M12")
final_plot_data=data.frame(matrix(ncol = 3,nrow = 12*6))
colnames(final_plot_data)=c("date","value","类型")
final_plot_data[1:12,1]=date_char
final_plot_data[1:12,2]=final_result[,2]
final_plot_data[1:12,3]="实际值"
final_plot_data[13:24,1]=date_char
final_plot_data[13:24,2]=final_result[,3]
final_plot_data[13:24,3]="ARIMA"
final_plot_data[25:36,1]=date_char
final_plot_data[25:36,2]=final_result[,4]
final_plot_data[25:36,3]="SVR"
final_plot_data[37:48,1]=date_char
final_plot_data[37:48,2]=final_result[,5]
final_plot_data[37:48,3]="BPANN"
final_plot_data[49:60,1]=date_char
final_plot_data[49:60,2]=final_result[,6]
final_plot_data[49:60,3]="ARIMA-SVR"
final_plot_data[61:72,1]=date_char
final_plot_data[61:72,2]=final_result[,7]
final_plot_data[61:72,3]="ARIMA-BPANN"
final_plot_data$date=as.factor(final_plot_data$date)
final_plot_data$`类型`=as.factor(final_plot_data$`类型`)
p1=ggplot(data = final_plot_data,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("2018")+ylab("")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
p2=ggplot(data = final_plot_data,aes(colour=`类型`))+
geom_boxplot(aes(x=date,y=value,group=`类型`))+
xlab("")+ylab("Mortality")+
guides(colour=F)+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),
axis.text.x = element_blank())
ggarrange(p2, p1,widths = c(1,2.5))
alldata[,4]=alldata[,5]
final_result$实际值=alldata[169:180,4]
final_result$ARIMA=fit1$fitted[169:180]
mysvr=svm(y~x1+x2+x3,data=final_train_data,gamma=0.05,cost=6e05)
final_result$SVR=predict(mysvr,final_train_data)
mybp= neuralnet(y~x1+x2+x3,final_train_data,
hidden=1, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_result$BPANN=predict(mybp,final_train_data)
final_result$`ARIMA-SVR`=fitdata4[133:144,2]
final_result$`ARIMA-BPANN`=fitdata5[133:144,2]
final_result
predict(mysvr,final_train_data)
predict(mysvr)
final_svrdata
mysvr=svm(y~x1+x2+x3,data=final_svrdata,gamma=0.05,cost=6e05)
final_svrdata$pred_y=predict(mysvr)
predict(mysvr)
alldata[,4]=alldata[,5]
final_train_data=data.frame(matrix(nrow = 12,ncol = 4))
final_train_data[,1]=alldata[169:180,4]
final_train_data[,2]=alldata[133:144,4]
final_train_data[,3]=alldata[145:156,4]
final_train_data[,4]=alldata[157:159,4]
colnames(final_train_data)=c("y","x1","x2","x3")
final_result=data.frame(matrix(nrow = 12,ncol = 7))
colnames(final_result)=c("日期","实际值","ARIMA","SVR","BPANN","ARIMA-SVR","ARIMA-BPANN")
final_result$日期=alldata[169:180,1]
final_result$实际值=alldata[169:180,4]
final_result$ARIMA=fit1$fitted[169:180]
mysvr=svm(y~x1+x2+x3,data=final_train_data,gamma=0.05,cost=6e05)
final_result$SVR=predict(mysvr,final_train_data)
mybp= neuralnet(y~x1+x2+x3,final_train_data,
hidden=1, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_result$BPANN=predict(mybp,final_train_data)
final_result$`ARIMA-SVR`=fitdata4[133:144,2]
final_result$`ARIMA-BPANN`=fitdata5[133:144,2]
final_result
fitdata5
final_bpdata$pred_y
predict(myarbp,final_bpdata)
final_bpdata
final_bpdata=data.frame(matrix(ncol = 4,nrow = 12*12))
colnames(final_bpdata)=c("y","x1","x2","x3")
for (i in 1:12) {
for (j in 1:12) {
final_bpdata$x1[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j]
final_bpdata$x2[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+12]
final_bpdata$x3[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+24]
final_bpdata$y[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+36]
}
}
final_bpdata
bpdata$Mortality
# bp start
bpdata=data
fitdata5
fitdata4
final_bpdata
bpdata
colnames(final_bpdata)=c("y","x1","x2","x3")
for (i in 1:12) {
for (j in 1:12) {
final_bpdata$x1[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j]
final_bpdata$x2[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+12]
final_bpdata$x3[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+24]
final_bpdata$y[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+36]
}
}
set.seed(1)
myarbp= neuralnet(y~x1+x2+x3,final_bpdata,
hidden=8, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
predict(myarbp,final_bpdata)
final_bpdata$pred_y=predict(myarbp,final_bpdata)
fitdata5=data.frame(matrix(ncol = 3,nrow = 144*2))
colnames(fitdata5)=c("date","value","类型")
fitdata5[1:144,1]=as.character(alldata$Time[37:180])
fitdata5[145:288,1]=as.character(alldata$Time[37:180])
fitdata5[1:144,2]=final_bpdata$pred_y+arima_main_result[37:180]
fitdata5[145:288,2]=final_bpdata$y++arima_main_data[37:180]
fitdata5$type=NA
fitdata5[1:144,3]="BPANN拟合值"
fitdata5[145:288,3]="真实值"
fitdata5$`类型`=as.factor(fitdata5$`类型`)
#plot12#
ggplot(data = fitdata5,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("时间")+ylab("Mortality")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
predict(myarbp,final_bpdata)
final_bpdata
#plot10#
ggplot(data = fitdata4,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("时间")+ylab("Mortality")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
test2
# arima-bp start
bpdata_train=test2[1:(144-12),]
bpdata_test=test2[(144-12+1):144,]
bp_result=data.frame(matrix(ncol = 2,nrow = 9))
colnames(bp_result)=c("BP net","MSE")
set.seed(11)
for (M in 1:9) {
mybp <- neuralnet(y~x1+x2+x3,bpdata_train,
hidden=M, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
#建立神经网络模型解决回归预测，三个输入，一个输出，
#隐藏层20个神经元，阈值为0.005，学习率为0.1，
#选用rprop+方法进行参数优化，损失函数SSE，激活函数logistic
bpdata_test$pred_y=predict(mybp,bpdata_test)
bpdata_test$error2=(bpdata_test$pred_y-bpdata_test$y)*(bpdata_test$pred_y-bpdata_test$y)
## caculate MSE
mse=mean(bpdata_test$error2)
bp_result$`BP net`[M]=paste("3-",M,"-1",sep = "")
bp_result$MSE[M]=mse
print(M)
}
#plot 11#
bp_result$MSE=bp_result$MSE*1e06
bp_result$MSE=round(bp_result$MSE,6)
ggplot(bp_result,aes(x=`BP net`,y=MSE))+geom_bar(stat = "identity",colour="black",fill="grey")+
geom_text(aes(label=MSE, y=MSE+0.05), position=position_dodge(0.9), vjust=0)+
xlab("BP net")+ylab("MSE(1e-6)")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
bpdata
final_bpdata=data.frame(matrix(ncol = 4,nrow = 12*12))
colnames(final_bpdata)=c("y","x1","x2","x3")
for (i in 1:12) {
for (j in 1:12) {
final_bpdata$x1[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j]
final_bpdata$x2[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+12]
final_bpdata$x3[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+24]
final_bpdata$y[(i-1)*12+j]=bpdata$Mortality[(i-1)*12+j+36]
}
}
data_residual
final_bpdata=data.frame(matrix(ncol = 4,nrow = 12*12))
colnames(final_bpdata)=c("y","x1","x2","x3")
for (i in 1:12) {
for (j in 1:12) {
final_bpdata$x1[(i-1)*12+j]=data_residual[(i-1)*12+j]
final_bpdata$x2[(i-1)*12+j]=data_residual[(i-1)*12+j+12]
final_bpdata$x3[(i-1)*12+j]=data_residual[(i-1)*12+j+24]
final_bpdata$y[(i-1)*12+j]=data_residual[(i-1)*12+j+36]
}
}
final_bpdata
set.seed(1)
myarbp= neuralnet(y~x1+x2+x3,final_bpdata,
hidden=8, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_bpdata$pred_y=predict(myarbp,final_bpdata)
fitdata5=data.frame(matrix(ncol = 3,nrow = 144*2))
colnames(fitdata5)=c("date","value","类型")
fitdata5[1:144,1]=as.character(alldata$Time[37:180])
fitdata5[145:288,1]=as.character(alldata$Time[37:180])
fitdata5[1:144,2]=final_bpdata$pred_y+arima_main_result[37:180]
fitdata5[145:288,2]=final_bpdata$y++arima_main_data[37:180]
fitdata5$type=NA
fitdata5[1:144,3]="BPANN拟合值"
fitdata5[145:288,3]="真实值"
fitdata5$`类型`=as.factor(fitdata5$`类型`)
#plot12#
ggplot(data = fitdata5,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("时间")+ylab("Mortality")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
alldata[,4]=alldata[,5]
final_train_data=data.frame(matrix(nrow = 12,ncol = 4))
final_train_data[,1]=alldata[169:180,4]
final_train_data[,2]=alldata[133:144,4]
final_train_data[,3]=alldata[145:156,4]
final_train_data[,4]=alldata[157:159,4]
colnames(final_train_data)=c("y","x1","x2","x3")
final_result=data.frame(matrix(nrow = 12,ncol = 7))
colnames(final_result)=c("日期","实际值","ARIMA","SVR","BPANN","ARIMA-SVR","ARIMA-BPANN")
final_result$日期=alldata[169:180,1]
final_result$实际值=alldata[169:180,4]
final_result$ARIMA=fit1$fitted[169:180]
mysvr=svm(y~x1+x2+x3,data=final_train_data,gamma=0.05,cost=6e05)
final_result$SVR=predict(mysvr,final_train_data)
mybp= neuralnet(y~x1+x2+x3,final_train_data,
hidden=1, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_result$BPANN=predict(mybp,final_train_data)
final_result$`ARIMA-SVR`=fitdata4[133:144,2]
final_result$`ARIMA-BPANN`=fitdata5[133:144,2]
ggplot(bp_result,aes(x=`BP net`,y=MSE))+geom_bar(stat = "identity",colour="black",fill="grey")+
geom_text(aes(label=MSE, y=MSE+0.05), position=position_dodge(0.9), vjust=0)+
xlab("BP net")+ylab("MSE(1e-6)")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
mybp= neuralnet(y~x1+x2+x3,final_train_data,
hidden=8, threshold=0.005,
learningrate = 0.1, algorithm = "rprop+",
err.fct = "sse", act.fct = "logistic")
final_result$BPANN=predict(mybp,final_train_data)
final_result$`ARIMA-SVR`=fitdata4[133:144,2]
final_result$`ARIMA-BPANN`=fitdata5[133:144,2]
final_result
date_char=c("M1","M2","M3","M4","M5","M6",
"M7","M8","M9","M10","M11","M12")
final_plot_data=data.frame(matrix(ncol = 3,nrow = 12*6))
colnames(final_plot_data)=c("date","value","类型")
final_plot_data[1:12,1]=date_char
final_plot_data[1:12,2]=final_result[,2]
final_plot_data[1:12,3]="实际值"
final_plot_data[13:24,1]=date_char
final_plot_data[13:24,2]=final_result[,3]
final_plot_data[13:24,3]="ARIMA"
final_plot_data[25:36,1]=date_char
final_plot_data[25:36,2]=final_result[,4]
final_plot_data[25:36,3]="SVR"
final_plot_data[37:48,1]=date_char
final_plot_data[37:48,2]=final_result[,5]
final_plot_data[37:48,3]="BPANN"
final_plot_data[49:60,1]=date_char
final_plot_data[49:60,2]=final_result[,6]
final_plot_data[49:60,3]="ARIMA-SVR"
final_plot_data[61:72,1]=date_char
final_plot_data[61:72,2]=final_result[,7]
final_plot_data[61:72,3]="ARIMA-BPANN"
final_plot_data$date=as.factor(final_plot_data$date)
final_plot_data$`类型`=as.factor(final_plot_data$`类型`)
p1=ggplot(data = final_plot_data,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("2018")+ylab("")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
p2=ggplot(data = final_plot_data,aes(colour=`类型`))+
geom_boxplot(aes(x=date,y=value,group=`类型`))+
xlab("")+ylab("Mortality")+
guides(colour=F)+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"),
axis.text.x = element_blank())
ggarrange(p2, p1,widths = c(1,2.5))
## MSE MAE MAPE
final_analysis=final_result
final_analysis$日期=as.character(final_analysis$日期)
final_analysis
for (i in 3:7) {
final_analysis[13,i]=mean((final_analysis[1:12,2]-final_analysis[1:12,i])*
(final_analysis[1:12,2]-final_analysis[1:12,i]))
}
final_analysis[13,1]='MSE'
for (i in 3:7) {
final_analysis[14,i]=mean(abs(final_analysis[1:12,2]-final_analysis[1:12,i]))
}
final_analysis[14,1]='MAE'
for (i in 3:7) {
final_analysis[15,i]=mean(abs((final_analysis[1:12,2]-final_analysis[1:12,i])/
final_analysis[1:12,2]))*100
}
final_analysis[15,1]='MAPE(%)'
View(final_analysis)
fitdata5
#plot12#
ggplot(data = fitdata5,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("时间")+ylab("Mortality")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
fitdata5
View(fitdata5)
#plot12#
ggplot(data = fitdata5,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("时间")+ylab("Mortality")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
#plot12#
fitdata5$date=as.factor(fitdata5$date)
ggplot(data = fitdata5,aes(x=date,y=value,group=`类型`,color=`类型`))+
geom_line(lwd=1)+scale_x_discrete(guide = guide_axis(check.overlap = TRUE))+
xlab("时间")+ylab("Mortality")+
theme_bw()+
theme(panel.border = element_blank(),panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),axis.line = element_line(colour = "black"))
View(final_analysis)
final_analysis
# arima start	    ——line58
# svr start	    	——line98
# bp start	    	——line244
# arima-svr start	——line374
# arima-bp start	——line510
#获取工作空间，请将数据放在该代码输出的地址路径中
rm(list = ls())
